const mongoose = require('mongoose');
const QuyTuThien = require('../src/app/models/QuyTuThien');

// K·∫øt n·ªëi MongoDB
mongoose.connect('mongodb://localhost:27017/BlueMoon');

(async () => {
    try {
        // X√≥a d·ªØ li·ªáu c≈©
        await QuyTuThien.deleteMany({});
        console.log('üóëÔ∏è ƒê√£ xo√° to√†n b·ªô qu·ªπ t·ª´ thi·ªán c≈©');

        // Reset AutoIncrement (_idQuyTuThien)
        // D·ªØ li·ªáu seed
        const today = new Date();
        const quytuthienData = [
            {
                tenQuy: 'Qu·ªπ H·ªçc B·ªïng M√πa H√®',
                mota: 'H·ªó tr·ª£ h·ªçc sinh ngh√®o v∆∞·ª£t kh√≥ m√πa h√®',
                ngayBatDau: new Date(today.getFullYear(), today.getMonth(), today.getDate() + 3),
                ngayKetThuc: new Date(today.getFullYear(), today.getMonth(), today.getDate() + 30),
            },
            {
                tenQuy: 'Qu·ªπ Gi√∫p ƒê·ª° Tr·∫ª Em M·ªì C√¥i',
                mota: 'G√¢y qu·ªπ gi√∫p ƒë·ª° tr·∫ª em kh√¥ng n∆°i n∆∞∆°ng t·ª±a',
                ngayBatDau: new Date(today.getFullYear(), today.getMonth(), today.getDate() - 10),
                ngayKetThuc: new Date(today.getFullYear(), today.getMonth(), today.getDate() + 10),
            },
            {
                tenQuy: 'Qu·ªπ B·∫£o V·ªá M√¥i Tr∆∞·ªùng',
                mota: 'G√¢y qu·ªπ cho c√°c ho·∫°t ƒë·ªông b·∫£o v·ªá m√¥i tr∆∞·ªùng',
                ngayBatDau: new Date(today.getFullYear(), today.getMonth(), today.getDate() - 30),
                ngayKetThuc: new Date(today.getFullYear(), today.getMonth(), today.getDate() - 1),
            },
        ];

        // Insert d·ªØ li·ªáu m·ªõi
        for (const item of quytuthienData) {
            const quy = new QuyTuThien(item);
            await quy.save();
        }

        console.log('‚úÖ Seed qu·ªπ t·ª´ thi·ªán th√†nh c√¥ng!');
    } catch (err) {
        console.error('‚ùå L·ªói khi seed:', err.message);
    } finally {
        mongoose.connection.close();
    }
})();
